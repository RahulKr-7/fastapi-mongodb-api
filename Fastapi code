from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from bson import ObjectId
from pymongo import MongoClient
from typing import List

app = FastAPI()

# MongoDB connection setup
client = MongoClient("mongodb://localhost:27017/")
db = client.user_database
user_collection = db.users

# Pydantic model for user
class User(BaseModel):
    name: str
    email: str
    age: int

class UpdateUser(BaseModel):
    name: str = None
    email: str = None
    age: int = None

def serialize_user(user):
    user["_id"] = str(user["_id"])
    return user

# 1. Create user
@app.post("/users/", response_model=dict)
async def create_user(user: User):
    user_data = user.dict()
    user_id = user_collection.insert_one(user_data).inserted_id
    return {"id": str(user_id), "message": "User created successfully"}

# 2. View/get user
@app.get("/users/{user_id}", response_model=dict)
async def get_user(user_id: str):
    if not ObjectId.is_valid(user_id):
        raise HTTPException(status_code=400, detail="Invalid user ID")
    user = user_collection.find_one({"_id": ObjectId(user_id)})
    if user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return serialize_user(user)

# 3. List and edit users' details
@app.get("/users/", response_model=List[dict])
async def list_users():
    users = user_collection.find()
    return [serialize_user(user) for user in users]

@app.put("/users/{user_id}", response_model=dict)
async def update_user(user_id: str, updated_user: UpdateUser):
    if not ObjectId.is_valid(user_id):
        raise HTTPException(status_code=400, detail="Invalid user ID")
    update_data = {k: v for k, v in updated_user.dict().items() if v is not None}
    if not update_data:
        raise HTTPException(status_code=400, detail="No valid fields to update")
    result = user_collection.update_one({"_id": ObjectId(user_id)}, {"$set": update_data})
    if result.matched_count == 0:
        raise HTTPException(status_code=404, detail="User not found")
    return {"message": "User details updated successfully"}

# Delete user
@app.delete("/users/{user_id}", response_model=dict)
async def delete_user(user_id: str):
    if not ObjectId.is_valid(user_id):
        raise HTTPException(status_code=400, detail="Invalid user ID")
    result = user_collection.delete_one({"_id": ObjectId(user_id)})
    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="User not found")
    return {"message": "User deleted successfully"}
